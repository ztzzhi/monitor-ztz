{"code":"import { createRouterEvent } from \"../utils/createRouterEvent\";\nimport { reportTracker } from \"./reportTracker\";\nimport { setUserId } from \"./setUserId\";\nconst _window = window;\nclass Monitor {\n    constructor(options) {\n        this.options = options;\n        _window.Monitor = {\n            _requestUrl_: this.options.requestUrl,\n            _addId_: this.options.appId,\n        };\n        this.pageStartTime = this.getTime();\n        this.currentPage = _window.location.href;\n        this.addEventListener();\n        if (this.options.routerTracker) {\n            this.installRouteTracker();\n        }\n        if (this.options.domTracker) {\n            this.installDomTracker();\n        }\n        if (this.options.jsError) {\n            this.installErrorTracker();\n        }\n    }\n    static getInstance() { }\n    // 添加监听事件\n    addEventListener() {\n        _window.history[\"pushState\"] = createRouterEvent(\"pushState\");\n        _window.history[\"replaceState\"] = createRouterEvent(\"replaceState\");\n    }\n    // 监听路由变化统计pv\n    installRouteTracker() {\n        this.getStayTime();\n    }\n    // 监听鼠标事件操作\n    installDomTracker() {\n        this.listenDom();\n    }\n    installErrorTracker() {\n        this.errorTrackerReport();\n    }\n    /**\n     * 1.语法错误 比如少了一个单引号 开发编译阶段即可发现无需处理 【 x 】\n     * 2.同步错误 比如使用的变量未定义 使用try catch即可捕获 开发编译阶段即可发现无需处理  【 x 】\n     * 3.异步错误 无法被try catch捕获 使用 【 window.onerror 】来捕获处理 【 ✓ 】\n     * 4.promise错误 对于没有使用try catch的全局监听 【 unhandledrejection 】进行兜底 【 ✓ 】\n     * 5.资源加载错误 全局监听 【 error 】进行兜底 【 ✓ 】\n     */\n    errorTrackerReport() {\n        this.jsError();\n        this.promiseError();\n        this.resourceError();\n    }\n    jsError() {\n        const originOnError = window.onerror;\n        window.onerror = function (msg, url, row, col, error) {\n            if (originOnError) {\n                originOnError.call(_window, msg, url, row, col, error);\n            }\n            reportTracker({\n                msg,\n                url,\n                row,\n                col,\n                error,\n                userId: _window.Monitor._userId_ || \"\",\n                type: \"jsError\",\n            }, \"Error\");\n        };\n    }\n    promiseError() {\n        window.addEventListener(\"unhandledrejection\", (error) => {\n            reportTracker({\n                error: error,\n                msg: error.reason,\n                userId: _window.Monitor._userId_ || \"\",\n                type: \"promiseError\",\n            }, \"Error\");\n        });\n    }\n    resourceError() {\n        window.addEventListener(\"error\", (error) => {\n            const target = error.target;\n            const isElementTarget = target instanceof HTMLScriptElement ||\n                target instanceof HTMLLinkElement ||\n                target instanceof HTMLImageElement;\n            // 只处理除了jsError的错误\n            if (!isElementTarget) {\n                return;\n            }\n            reportTracker({\n                error: error,\n                //@ts-ignore\n                target: target.src || target.href,\n                msg: target.tagName + \"资源加载错误\",\n                userId: _window.Monitor._userId_ || \"\",\n                type: \"resourceError\",\n            }, \"Error\");\n        }, true);\n    }\n    listenDom() {\n        const mouseEventArr = [\"click\", \"dbclick\", \"contextmenu\"];\n        mouseEventArr.forEach((event) => {\n            _window.addEventListener(event, (e) => {\n                const target = e.target;\n                const trackerKey = target.getAttribute(\"tracker-key\");\n                // 上报PV数据\n                if (trackerKey) {\n                    reportTracker({\n                        event,\n                        trackerKey,\n                        target,\n                        userId: _window.Monitor._userId_ || \"\",\n                    }, \"Mouse Event\");\n                }\n            });\n        });\n    }\n    // 统计页面停留时长\n    getStayTime() {\n        [\"hashchange\", \"pushState\", \"replaceState\", \"popstate\"].forEach((item) => {\n            _window.addEventListener(item, (event) => {\n                let currentPage = _window.location.href;\n                if (currentPage === this.currentPage)\n                    return;\n                this.currentPage = currentPage;\n                let stayTime = this.calcStayTime() / 1000;\n                if (stayTime > 0.2) {\n                    this.pageStartTime = this.getTime();\n                    if (_window.Monitor._userId_) {\n                        // 上报PV数据\n                        reportTracker({\n                            stayTime,\n                            currentPage,\n                            userId: _window.Monitor._userId_,\n                        }, \"UV\");\n                    }\n                    else {\n                        // 上报PV数据\n                        reportTracker({\n                            stayTime,\n                            currentPage,\n                        }, \"PV\");\n                    }\n                }\n            });\n        });\n    }\n    getTime() {\n        return new Date().getTime();\n    }\n    calcStayTime() {\n        return this.getTime() - this.pageStartTime;\n    }\n}\n_window.Monitor = Monitor;\nexport { Monitor as default, reportTracker, setUserId };\n","references":["/Users/ztz/myPro/ztz-monitor/src/types/index.ts","/Users/ztz/myPro/ztz-monitor/src/utils/createRouterEvent.ts","/Users/ztz/myPro/ztz-monitor/src/core/reportTracker.ts","/Users/ztz/myPro/ztz-monitor/src/core/setUserId.ts"]}
